# Atributo
É uma variável que pertence a um objeto.
Representa uma característica ou estado do objeto.
Pode ser acessado diretamente com obj.atributo.


class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome  # atributo
        self.idade = idade  # atributo

p = Pessoa("Ana", 30)
print(p.nome)  # saída: Ana

=============================================
# Método
É uma função definida dentro de uma classe.
Representa um comportamento ou ação que o objeto pode realizar.
É chamado com obj.metodo().

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def apresentar(self):  # método
        return f"Olá, meu nome é {self.nome} e tenho {self.idade} anos."

p = Pessoa("Ana", 30)
print(p.apresentar())  # saída: Olá, meu nome é Ana e tenho 30 anos.
=============================================

Conceito	O que é?	                Exemplo de uso
Atributo	Dado/variável do objeto	    p.nome
Método	   Função do objeto	            p.apresentar()

===============================================
Em Python, tudo é um objeto — números, strings, listas, funções, até mesmo classes. Mas o que exatamente é um objeto?

# O que é um objeto?
Um objeto é uma instância de uma classe. Ele representa uma entidade com dados (atributos) 
e comportamentos (métodos).

Pense em uma classe como um molde (como a planta de uma casa), e o objeto como a casa construída 
a partir desse molde.


class Cachorro:
    def __init__(self, nome):
        self.nome = nome

    def latir(self):
        print(f"{self.nome} diz: Au au!")

# Criando um objeto da classe Cachorro
meu_cachorro = Cachorro("Rex")

# Usando o objeto
meu_cachorro.latir()  # Saída: Rex diz: Au au!

Cachorro é a classe.
meu_cachorro é um objeto (ou instância) da classe Cachorro.
nome é um atributo.
latir() é um método.
=============================================
Para acessar qualquer coisa em python é com []
para separar dicinário é o ":"
para atribuir é =
=============================================
Input serve para eu ler alguma coisa do python 

nome = input("Digite seu nome:" )

O input espera uma interação "humana" 

ELe também serve para quando quiser pausar o programa Ex.: 

input("aperte enter para continuar")

OBS: só serve enter porque depois de digitar o nome precisar dar um "enter"

===========================================

Posso alterar o valor de uma variável global dentro de uma função?
Se o valor da variável global for imutável, então para alterar o apontamento da variável global precisaremos dizer ao Python que ao invés de estarmos fazendo uma nova atribuição local estamos substituindo o apontamento da variável global.

nome = "valor" # string imutável global

def muda_nome():
    # explicitamante dizemos que a variavel é global
    global nome
    # reatribuição do apontamento da variável global
    nome = "outro valor"  

muda_nome()

print(nome)
# outro valor

===================================================

Posso criar uma variável global dentro de uma função?
Sim, basta utilizar a palavra global antes da variável que desejamos criar globalmente.

def cria_nome():
    global nome
    nome = "valor"

print(nome)
# NameError: name 'nome' is not defined

cria_nome()
print(nome)
# valor

===================================================================

as se por acaso quisermos acessar a variável nome do escopo global, podemos usar a função globals() que é um dicionário que contém todas as variáveis do escopo global.

nome = 'valor'  # variável global

def funcao1():
    nome = 'outro valor'  # variável local
    nome = nome + globals()['nome']  # acesso a variável global  
    return nome  # o valor de retorno é o da variável local

print(funcao1())  # O valor de retorno é acessado
# outro valorvalor

print(nome)  # Continua com o valor da variável global
# valor

==========================